const int sz = 26;

struct Node
{
    int cnt;
    Node *arr[sz];
    bool flag;

    Node()
    {
        cnt = 0, flag = false;

        for (int i = 0; i < sz; i++)
        {
            arr[i] = NULL;
        }
    }
};

class Trie
{
    Node *root;

public:
    /** Initialize your data structure here. */
    Trie()
    {
        root = new Node();
    }

    /** Inserts a word into the trie. */
    void insert(string &word)
    {
        Node *temp = root;

        for (char c : word)
        {
            int index = c - 'a';
            if (temp->arr[index] == NULL)
                temp->arr[index] = new Node();
            temp->cnt++;
            temp = temp->arr[index];
        }

        temp->cnt++;
        temp->flag = true;
    }

    /** Returns if the word is in the trie. */
    bool search(string &word)
    {
        Node *temp = root;

        for (char c : word)
        {
            int index = c - 'a';
            if (temp->arr[index] == NULL || temp->cnt == 0)
                return false;
            temp = temp->arr[index];
        }

        return temp->flag;
    }

    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string &prefix)
    {
        Node *temp = root;

        for (char c : prefix)
        {
            int index = c - 'a';
            if (temp->arr[index] == NULL || temp->cnt == 0)
                return false;
            temp = temp->arr[index];
        }

        return (temp->cnt > 0);
    }

    /** delete a word from trie */
    void del(string &s)
    {
        if (search(s) == false)
            return;

        Node *temp = root;

        for (char c : s)
        {
            int index = c - 'a';
            temp->cnt--;
            temp = temp->arr[index];
        }

        temp->cnt--;
        temp->flag = false;
    }

    // bool isLast()

    void printSuggestions(Node *node, string s)
    {
        if(node->flag)
        {
            cout<<s<<endl;
        }

        for (int i = 0; i < sz; i++)
        {
            if(node->arr[i])
            {
                s.push_back('a'+i);
                printSuggestions(node->arr[i], s);
                s.pop_back();
            }
        }
        
    }

    void autoComplete(string &s)
    {
        Node *temp = root;

        for(char c: s)
        {
            int index = c - 'a';
            if(temp->arr[index]==NULL||temp->cnt==0)return;
            temp = temp->arr[index];
        }

        printSuggestions(temp,s);
    }
};