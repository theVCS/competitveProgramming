void dfs(int node = 1, int par = -1, int l = 0)
{
    parent[node] = par;
    level[node] = l;
    subSize[node] = 1;

    int nodeX = -1, size = 0;

    for (int child : tree[node])
    {
        if (child == par)
            continue;

        dfs(child, node, l + 1);

        subSize[node] += subSize[child];

        if (size < subSize[child])
            size = subSize[child], nodeX = child;
    }

    // special child calculation
    specialChild[node] = nodeX;
}

void init()
{
    dfs();
}

int timer, label[maxN], chainHead[maxN];
int arr[maxN];
// segment tree
int segTree[maxN * 4];

void build(int si, int ss, int se)
{
    if (ss == se)
    {
        segTree[si] = arr[ss];
    }
    else
    {
        int mid = (ss + se) / 2;
        build(2 * si, ss, mid);
        build(2 * si + 1, mid + 1, se);
        segTree[si] = max(segTree[2 * si], segTree[2 * si + 1]);
    }
}

int query(int si, int ss, int se, int qs, int qe)
{
    if (ss > qe || se < qs)
        return 0;
    if (qs <= ss && qe >= se)
        return segTree[si];

    int mid = (ss + se) / 2;
    return max(query(2 * si, ss, mid, qs, qe), query(2 * si + 1, mid + 1, se, qs, qe));
}

void update(int si, int ss, int se, int qi)
{
    if (ss == se)
    {
        segTree[si] = arr[ss];
        return;
    }

    int mid = (ss + se) / 2;

    if (qi <= mid)
        update(2 * si, ss, mid, qi);
    else
        update(2 * si + 1, mid + 1, se, qi);

    segTree[si] = max(segTree[2 * si], segTree[2 * si + 1]);
}

// heavy light decomposition part
void HLD(int node = 1, int par = -1)
{
    label[node] = ++timer;
    arr[timer] = val[node];
    update(1, 1, n, timer);

    int sc = specialChild[node];

    if (sc != -1)
    {
        chainHead[sc] = chainHead[node];
        HLD(sc, node);
    }

    for (int child : tree[node])
    {
        if (child == sc || child == par)
            continue;
        HLD(child, node);
    }
}

// will give answer for the given query between node and ancestor
int queryHLD(int a, int b)
{
    int res = 0;
    int chainA = chainHead[a], chainB = chainHead[b];

    while (true)
    {
        if (level[chainHead[a]] > level[chainHead[b]])
            swap(a, b);
        
        chainA = chainHead[a], chainB = chainHead[b];

        if (chainA == chainB)
        {
            if (level[a] > level[b])
                swap(a, b);
            res = max(res, query(1, 1, n, label[a], label[b]));
            return res;
        }

        res = max(res, query(1, 1, n, label[chainB], label[b]));
        b = parent[chainHead[b]];
    }
}

void solve()
{
    int a, b, c;

    scanf("%d%d", &n, &q);

    timer = 0;
    REP(i, 1, n)
    {
        chainHead[i] = i;
        scanf("%d", val + i);
    }

    REP(i, 1, n - 1)
    {
        scanf("%d%d", &a, &b);
        tree[a].push_back(b), tree[b].push_back(a);
    }

    init();
    HLD();

    REP(i, 1, q)
    {
        scanf("%d%d%d", &c, &a, &b);

        if (c == 1)
        {
            val[a] = b;
            arr[label[a]] = b;
            update(1, 1, n, label[a]);
        }
        else
        {
            printf("%d ", queryHLD(a, b));
        }
    }
}