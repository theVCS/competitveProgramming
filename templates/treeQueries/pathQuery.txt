int n, m;

// initialization
vector<int> arr[maxN];
int level[maxN], parent[maxN][19];

// flattening tree
int FT[2 * maxN], intime[maxN], outime[maxN], timer;
int nodeFre[maxN];

// answer
ll ans[maxN], res;

void euler(int node = 1, int par = -1, int l = 0)
{
    intime[node] = ++timer;
    FT[timer] = node;
    parent[node][0] = par;
    level[node] = l;

    for (int child : arr[node])
    {
        if (child != par)
        {
            euler(child, node, l + 1);
        }
    }

    outime[node] = ++timer;
    FT[timer] = node;
}

void init(int n)
{
    euler();

    for (int j = 1; j < 19; j++)
    {
        for (int i = 1; i <= n; i++)
        {
            if (parent[i][j - 1] == -1)
            {
                parent[i][j] = -1;
            }
            else
            {
                parent[i][j] = parent[parent[i][j - 1]][j - 1];
            }
        }
    }
}

int LCA(int a, int b)
{
    if (level[a] < level[b])
        swap(a, b);

    int d = level[a] - level[b];

    while (d)
    {
        int i = log2(d);
        a = parent[a][i];
        d -= 1 << i;
    }

    if (a == b)
        return a;

    for (int i = 18; i >= 0; i--)
    {
        if (parent[a][i] != -1 && parent[a][i] != parent[b][i])
        {
            a = parent[a][i], b = parent[b][i];
        }
    }

    return parent[a][0];
}

inline int64_t gilbertOrder(int x, int y, int pow, int rotate) {
	if (pow == 0) {
		return 0;
	}
	int hpow = 1 << (pow-1);
	int seg = (x < hpow) ? (
		(y < hpow) ? 0 : 3
	) : (
		(y < hpow) ? 1 : 2
	);
	seg = (seg + rotate) & 3;
	const int rotateDelta[4] = {3, 0, 0, 1};
	int nx = x & (x ^ hpow), ny = y & (y ^ hpow);
	int nrot = (rotate + rotateDelta[seg]) & 3;
	int64_t subSquareSize = int64_t(1) << (2*pow - 2);
	int64_t ans = seg * subSquareSize;
	int64_t add = gilbertOrder(nx, ny, pow-1, nrot);
	ans += (seg == 1 || seg == 2) ? add : (subSquareSize - add - 1);
	return ans;
}

struct query
{
    int l, r, lca, index;
    ll ord;

    inline void calcOrder() {
		ord = gilbertOrder(l, r, 21, 0);
	}
} Q[maxN];

bool cmp(query a, query b)
{
    return a.ord < b.ord;
}

void add(int index)
{
    int node = FT[index];
    nodeFre[node]++;

    if (nodeFre[node] == 1)
    {
        res++;
    }
    else if (nodeFre[node] == 2)
    {
        res--;
    }
}

void remove(int index)
{
    int node = FT[index];
    nodeFre[node]--;

    if (nodeFre[node] == 1)
    {
        res++;
    }
    else if (nodeFre[node] == 0)
    {
        res--;
    }
}

void solve()
{
    int a, b;
    scanf("%d%d", &n, &m);

    REP(i, 1, n - 1)
    {
        scanf("%d %d", &a, &b);
        arr[a].push_back(b), arr[b].push_back(a);
    }

    init(n);

    REP(i, 1, m)
    {
        scanf("%d %d", &a, &b);

        if (intime[a] > intime[b])
            swap(a, b);

        int lca = LCA(a, b);

        if (lca == a)
        {
            Q[i].l = intime[a];
            Q[i].lca = -1;
        }
        else
        {
            Q[i].l = outime[a];
            Q[i].lca = lca;
        }

        Q[i].r = intime[b];
        Q[i].index = i;
        Q[i].calcOrder();
    }

    sort(Q + 1, Q + 1 + m, cmp);

    for (int i = 1, L = 1, R = 0; i <= m; i++)
    {
        while (L < Q[i].l)
            remove(L++);
        while (L > Q[i].l)
            add(--L);
        while (R < Q[i].r)
            add(++R);
        while (R > Q[i].r)
            remove(R--);

        ans[Q[i].index] = res;

        int lca = Q[i].lca;

        if (lca > 0)
        {
            // perform operation on lca
        }
    }

    REP(i, 1, m)
    printf("%d\n", ans[i]);
}