int n, q;
int level[maxN], parent[maxN][20], subSize[maxN];
vector<pair<int,ll>> tree[maxN];
pair<int,ll> specialChild[maxN];

// dfs call on given tree for pre-computation
void dfs(int node = 1, int par = -1, int l = 0)
{
    parent[node][0] = par;
    level[node] = l;
    subSize[node] = 1;

    int nodeX = -1, size = 0;
    ll weight = 0;

    for (pair<int,ll> child : tree[node])
    {
        if (child.first == par)
            continue;

        dfs(child.first, node, l + 1);

        subSize[node] += subSize[child.first];

        if (size < subSize[child.first])
            size = subSize[child.first], nodeX = child.first, weight = child.second;
    }

    // special child calculation
    specialChild[node] = {nodeX, weight};
}

void init()
{
    dfs();

    for (int j = 1; j < 20; j++)
    {
        for (int i = 1; i <= n; i++)
        {
            if (parent[i][j - 1] == -1)
                parent[i][j] = -1;
            else
                parent[i][j] = parent[parent[i][j - 1]][j - 1];
        }
    }
}

int timer, label[maxN], chainHead[maxN];
ll arr[maxN];

// heavy light decomposition part
void HLD(int node = 1, int par = -1, ll val = 0)
{
    label[node] = timer;
    arr[timer++] = val;

    int sc = specialChild[node].first;

    if (sc != -1)
    {
        chainHead[sc] = chainHead[node];
        HLD(sc, node, specialChild[node].second);
    }

    for (pii child : tree[node])
    {
        if (child.first == sc || child.first == par)
            continue;
        HLD(child.first, node, child.second);
    }
}

// segment tree
ll segTree[maxN * 4];

void build(int si, int ss, int se)
{
    if (ss == se)
    {
        segTree[si] = arr[ss];
    }
    else
    {
        int mid = (ss + se) / 2;
        build(2 * si, ss, mid);
        build(2 * si + 1, mid + 1, se);
        segTree[si] = max(segTree[2 * si], segTree[2 * si + 1]);
    }
}

ll query(int si, int ss, int se, int qs, int qe)
{
    if (ss > qe || se < qs)
        return 0;
    if (qs <= ss && qe >= se)
        return segTree[si];

    int mid = (ss + se) / 2;
    return max(query(2 * si, ss, mid, qs, qe), query(2 * si + 1, mid + 1, se, qs, qe));
}

void update(int si, int ss, int se, int qi)
{
    if (ss == se)
    {
        segTree[si] = arr[ss];
        return;
    }

    int mid = (ss + se) / 2;

    if (qi <= mid)
        update(2 * si, ss, mid, qi);
    else
        update(2 * si + 1, mid + 1, se, qi);

    segTree[si] = max(segTree[2 * si], segTree[2 * si + 1]);
}

// LCA finder
int LCA(int a, int b)
{
    if (level[a] < level[b])
        swap(a, b);

    int d = level[a] - level[b];

    while (d)
    {
        int i = log2(d);
        a = parent[a][i];
        d -= 1 << i;
    }

    if (a == b)
        return a;

    for (int i = 19; i >= 0; i--)
    {
        if (parent[a][i] != -1 && parent[a][i] != parent[b][i])
            a = parent[a][i], b = parent[b][i];
    }

    return parent[a][0];
}

// k-th ancestor finder
int kAncestor(int a, int d)
{
    while (d)
    {
        int i = log2(d);
        a = parent[a][i];
        d -= 1 << i;
    }

    return a;
}

// will give answer for the given query between node and ancestor
ll queryHLD(int node, int ances)
{
    ll res = 0, top = 0;

    while (level[node] > level[ances])
    {
        top = chainHead[node];

        if (level[top] <= level[ances])
        {
            top = kAncestor(node, level[node] - level[ances] - 1);
        }

        res = max(res, query(1, 1, n, label[top], label[node]));
        node = parent[top][0];
    }

    return res;
}

void solve()
{
    int a, b, c, lca;

    scanf("%d", &n);

    // initialization
    timer = 0;
    REP(i,1,n)chainHead[i] = i;

    REP(i, 1, n - 1)
    {
        scanf("%d %d %d", &a, &b, &c);
        tree[a].push_back({b, c}), tree[b].push_back({a, c});
    }

    init();
    HLD();
    build(1, 1, n);

    // query
    int a, b;
    cin >> a >> b;
    int lca = LCA(a, b);
    cout << max(queryHLD(a, lca), queryHLD(b, lca));

    //updating any weight
    int a, b, w;
    cin >> a >> b >> w;
    int lab = max(label[a], label[b]);
    arr[lab] = w;
    update(1,1,n,lab);

    //note -> if in place of weight we have values of nodes then we also need to include lca
}
