// note -> every node occurs twice in array

int n, m;
vector<int> arr[maxN];
int val[maxN];

// applying euler tour technique
int intime[maxN], outime[maxN], FT[maxN * 2], timer;

void euler(int node = 1, int par = -1)
{
    intime[node] = ++timer;
    FT[timer] = node;

    for (int child : arr[node])
    {
        if (child == par)
            continue;
        euler(child, node);
    }

    outime[node] = ++timer;
    FT[timer] = node;
}

// applying mo's algo and sqrt decomposition
int nodeFre[maxN], ans[maxN], res;

 
inline int64_t gilbertOrder(int x, int y, int pow, int rotate) {
	if (pow == 0) {
		return 0;
	}
	int hpow = 1 << (pow-1);
	int seg = (x < hpow) ? (
		(y < hpow) ? 0 : 3
	) : (
		(y < hpow) ? 1 : 2
	);
	seg = (seg + rotate) & 3;
	const int rotateDelta[4] = {3, 0, 0, 1};
	int nx = x & (x ^ hpow), ny = y & (y ^ hpow);
	int nrot = (rotate + rotateDelta[seg]) & 3;
	int64_t subSquareSize = int64_t(1) << (2*pow - 2);
	int64_t ans = seg * subSquareSize;
	int64_t add = gilbertOrder(nx, ny, pow-1, nrot);
	ans += (seg == 1 || seg == 2) ? add : (subSquareSize - add - 1);
	return ans;
}

struct Query
{
    int l, r, index;
    ll ord;

    inline void calcOrder() {
		ord = gilbertOrder(l, r, 21, 0);
	}
} q[maxN];

bool cmp(Query a, Query b)
{
    return a.ord < b.ord;
}

void add(int index)
{
    int node = FT[index];
    int c = val[node];

    if (++nodeFre[node] == 2)
    {
        res += c;
    }
}

void remove(int index)
{
    int node = FT[index];
    int c = val[node];

    if (--nodeFre[node] == 1)
    {
        res -= c;    
    }
}

void solve()
{
    int a, b, k;

    cin >> n >> m;

    REP(i, 1, n)
    {
        cin >> val[i];
    }

    REP(i, 1, n - 1)
    {
        cin >> a >> b;
        arr[a].push_back(b), arr[b].push_back(a);
    }

    euler(1);

    REP(i, 1, m)
    {
        cin >> a;
        q[i].l = intime[a];
        q[i].r = outime[a];
        q[i].index = i;
        q[i].calcOrder();
    }

    sort(q + 1, q + m + 1, cmp);

    for (int i = 1, L = 1, R = 0; i <= m; i++)
    {
        while (R < q[i].r)
            add(++R);
        while (L > q[i].l)
            add(--L);
        while (R > q[i].r)
            remove(R--);
        while (L < q[i].l)
            remove(L++);

        ans[q[i].index] = res;
    }

    REP(i, 1, m)
    cout << ans[i] << endl;
}