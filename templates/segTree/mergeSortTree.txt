ll arr[maxN];
vector<ll> segTree[4 * maxN];

void build(int si, int ss, int se)
{
    if (ss == se)
    {
        segTree[si].push_back(arr[ss]);
    }
    else
    {
        int mid = (ss + se) / 2;

        build(2 * si, ss, mid);
        build(2 * si + 1, mid + 1, se);

        int i = 0, j = 0;

        while (i < segTree[2 * si].size() && j < segTree[2 * si + 1].size())
        {
            if (segTree[2 * si][i] <= segTree[2 * si + 1][j])
                segTree[si].push_back(segTree[2 * si][i]), i++;
            else
                segTree[si].push_back(segTree[2 * si + 1][j]), j++;
        }

        while (i < segTree[2 * si].size())
            segTree[si].push_back(segTree[2 * si][i]), i++;
        while (j < segTree[2 * si + 1].size())
            segTree[si].push_back(segTree[2 * si + 1][j]), j++;
    }
}

int query(int si, int ss, int se, int qs, int qe, ll c)
{
    if (ss > qe || se < qs)
        return 0;

    if (ss >= qs && se <= qe)
    {
        int res = upper_bound(segTree[si].begin(), segTree[si].end(), c) - segTree[si].begin();
        return (segTree[si].size() - res);
    }

    int mid = (ss + se) / 2;
    return (query(2 * si, ss, mid, qs, qe, c) + query(2 * si + 1, mid + 1, se, qs, qe, c));
}