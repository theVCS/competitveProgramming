ll arr[maxN];
ll segTree[4 * maxN];

// build function
void build(int si, int ss, int se)
{
    if(ss == se)
    {
        segTree[si] = arr[ss];
    }
    else
    {
        int mid = (ss + se) / 2;
        build(2*si,ss,mid);
        build(2*si+1,mid+1,se);
        segTree[si] = max(segTree[2*si], segTree[2*si+1]);
    }
}

// range query
ll query(int si, int ss, int se, int qs, int qe)
{
    if (ss > qe || se < qs)
        return -__LONG_LONG_MAX__;

    if (qs <= ss && qe >= se)
    {
        return segTree[si];
    }

    int mid = (ss + se) / 2;
    return max(query(2 * si, ss, mid, qs, qe), query(2 * si + 1, mid + 1, se, qs, qe));
}

// point update
void update(int si, int ss, int se, int qi, ll val)
{
    if (ss == se)
    {
        segTree[si] += val;
        return;
    }

    int mid = (ss + se) / 2;

    if (qi <= mid)
    {
        update(2 * si, ss, mid, qi, val);
    }
    else
    {
        update(2 * si + 1, mid + 1, se, qi, val);
    }

    segTree[si] = max(segTree[2 * si], segTree[2 * si + 1]);
}