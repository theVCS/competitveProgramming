int n, m;
struct edge
{
    int a;
    int b;
    ll w;
};
edge edg[maxN];
int par[maxN];

bool comp(edge a, edge b)
{
    return (a.w < b.w);    
}

int find(int a)
{
    if (par[a] < 0)
        return a;
    else
        return par[a] = find(par[a]);
}

void merge(int a, int b)
{
    if (par[a] > par[b])
        swap(a, b);

    par[a] += par[b];
    par[b] = a;
}

int main(int argc, char const *argv[])
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int a, b;

    cin >> n >> m;

    REP(i, 1, n)
    {
        par[i] = -1;
    }

    REP(i, 1, m)
    {
        cin >> edg[i].a >> edg[i].b >> edg[i].w;
    }

    sort(edg + 1, edg + m + 1, comp);

    ll sum = 0;

    REP(i, 1, m)
    {
        a = find(edg[i].a);
        b = find(edg[i].b);

        if (a != b)
        {
            sum += edg[i].w;
            merge(a, b);
        }
    }

    cout << sum;

    return 0;
}