const int N = 3;
int n = 2;
ll matrix[N][N];
ll identity[N][N];
ll res[N][N];

void multiply(ll a[][N], ll b[][N])
{
    REP(i, 1, n)
    {
        REP(j, 1, n)
        {
            res[i][j] = 0;

            REP(k, 1, n)
            {
                a[i][k] %= mod;
                b[k][j] %= mod;
                res[i][j] = (res[i][j] + (a[i][k] * b[k][j]) % mod) % mod;
            }
        }
    }

    REP(i,1,n)
    REP(j,1,n)
    a[i][j]=res[i][j];
}

void matExp(long long p)
{
    while (p)
    {
        if (p & 1)
            multiply(identity, matrix);
        multiply(matrix, matrix);
        p >>= 1;
    }
}

ll fib(long long p)    // n = p where n is nth fib number
{
    p %= 2000000016
    p--;

    identity[1][1] = identity[2][2] = 1;
    identity[1][2] = identity[2][1] = 0;

    matrix[1][1] = 0;
    matrix[1][2] = matrix[2][1] = matrix[2][2] = 1;

    matExp(p);

    // 0 1 1 2 3 5 so on
    // return identity[1][2];

    //1 1 2 3 5
    return identity[2][2];

    // 1 2 3 5
    // return (identity[2][1] + identity[2][2]) % mod;
}