const int N = 101;
int n;
ll matrix[N][N];
ll identity[N][N];
ll res[N][N];
ll p;

void multiply(ll a[][N], ll b[][N])
{
    REP(i, 1, n)
    {
        REP(j, 1, n)
        {
            res[i][j] = 0;

            REP(k, 1, n)
            {
                res[i][j] = (res[i][j] + a[i][k] * b[k][j]) % mod;
            }
        }
    }

    REP(i,1,n)
    REP(j,1,n)
    a[i][j]=res[i][j];
}

void matExp()
{
    while (p)
    {
        if (p & 1)
            multiply(identity, matrix);
        multiply(matrix, matrix);
        p >>= 1;
    }
}

void solve()
{
    cin >> n >> p;

    REP(i, 1, n)
    REP(j, 1, n)
    {
        cin >> matrix[i][j];

        matrix[i][j] %= mod;

        // changing identity to identity matrix
        if (i == j)
            identity[i][j] = 1;
        else
            identity[i][j] = 0;
    }

    matExp();

    // result stored in identity matrix
    REP(i, 1, n)
    {
        REP(j, 1, n)
            cout << identity[i][j] << " ";

        cout<<endl;
    }
}