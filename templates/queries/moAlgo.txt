int n, q;
ll arr[maxN], fre[maxN], res, ans[maxN];
 
inline int64_t gilbertOrder(int x, int y, int pow, int rotate) {
	if (pow == 0) {
		return 0;
	}
	int hpow = 1 << (pow-1);
	int seg = (x < hpow) ? (
		(y < hpow) ? 0 : 3
	) : (
		(y < hpow) ? 1 : 2
	);
	seg = (seg + rotate) & 3;
	const int rotateDelta[4] = {3, 0, 0, 1};
	int nx = x & (x ^ hpow), ny = y & (y ^ hpow);
	int nrot = (rotate + rotateDelta[seg]) & 3;
	int64_t subSquareSize = int64_t(1) << (2*pow - 2);
	int64_t ans = seg * subSquareSize;
	int64_t add = gilbertOrder(nx, ny, pow-1, nrot);
	ans += (seg == 1 || seg == 2) ? add : (subSquareSize - add - 1);
	return ans;
}

struct query
{
    int l, r, index;
    ll ord;

    inline void calcOrder() {
		ord = gilbertOrder(l, r, 21, 0);
	}
} Q[maxN];

bool cmp(query a, query b)
{
    a.ord < b.ord;
}

void add(int index)
{
    ll ele = arr[index];

    if (++fre[ele] == 1)
        res++;
}

void remove(int index)
{
    ll ele = arr[index];

    if (--fre[ele] == 0)
        res--;
}

void solve()
{

    cin >> n >> q;

    REP(i, 1, n)
    cin >> arr[i];

    REP(i, 1, q)
    {
        cin >> Q[i].l >> Q[i].r;
        Q[i].index = i;
        Q[i].calcOrder();
    }

    sort(Q + 1, Q + q + 1, cmp);

    for (int i = 1, L = 1, R = 0; i <= q; i++)
    {
        while (R < Q[i].r)
            add(++R);
        while (L > Q[i].l)
            add(--L);
        while (R > Q[i].r)
            remove(R--);
        while (L < Q[i].l)
            remove(L++);

        ans[Q[i].index] = res;
    }

    REP(i, 1, q)
    cout << ans[i] << endl;
}
